#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        delete_rest: delete_rest {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B>;
            label = "delete_rest_label";
        };

        end_ent: end_ent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp ENTER>;
            label = "END_ENT";
        };

        all_sel: all_sel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "ALL_SEL";
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        custom_shift: custom_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <135>;
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        to_func {
            bindings = <&mo 2>;
            key-positions = <31 30 66>;
            layers = <0>;
            slow-release;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <66 31>;
            layers = <0>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <66 19>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <66 33>;
        };

        win {
            bindings = <&sk LEFT_GUI>;
            key-positions = <47 66>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <17 66>;
        };

        pgdn {
            bindings = <&kp PG_DN>;
            key-positions = <66 30>;
        };

        pgup {
            bindings = <&kp PG_UP>;
            key-positions = <16 66>;
        };

        to_arr {
            bindings = <&mo 3>;
            key-positions = <66 31 32>;
            slow-release;
        };

        dt_right {
            bindings = <&kp LG(LC(RIGHT))>;
            key-positions = <49 50>;
        };

        dt_left {
            bindings = <&kp LG(LC(LEFT))>;
            key-positions = <48 49>;
        };

        left_sel {
            bindings = <&kp LC(LS(LEFT_ARROW))>;
            key-positions = <56 55>;
        };

        right_sel {
            bindings = <&kp LC(LS(RIGHT))>;
            key-positions = <57 56>;
        };

        all_sel {
            bindings = <&kp B>;
            key-positions = <55 56 57>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC        &kp M      &kp U    &kp I     &kp O        &kp P  &tog 1                                                             &mo 3      &kp N6  &kp N7  &kp N8     &kp N9     &kp N0                       &kp LANG2
&kp TAB        &kp Q      &kp W    &kp E     &kp R        &kp T  &none                                                              &none      &kp Y   &kp U   &kp I      &kp O      &kp P                        &kp RIGHT
&kp LC(COMMA)  &kp A      &kp S    &kp D     &kp F        &kp G  &none     &kp LEFT_ALT  &kp LEFT_GUI        &kp LGUI   &caps_word  &none      &kp H   &kp J   &kp K      &kp L      &custom_shift PIPE UNDER     &macro_ver
&kp LG(RIGHT)  &kp Z      &kp X    &kp C     &kp V        &kp B                          &kp LCTRL           &mo 4                             &kp N   &kp M   &kp COMMA  &kp DOT    &custom_shift EXCL QUESTION  &delete_rest
&bootloader    &kp GRAVE  &kp DOT  &kp LEFT  &kp LG(TAB)         &kp BSPC  &mo 1         &kp LEFT_SHIFT      &kp LANG1  &kp ENTER   &kp SPACE          &kp UP  &kp DOWN   &kp RIGHT  &kp RBKT                     &bootloader
            >;
        };

        num_sym {
            bindings = <
&trans              &kp N                        &kp H            &kp J            &kp K            &kp L            &trans                                            &mo 3      &custom_shift SEMI COLON  &custom_shift AMPERSAND BACKSLASH  &custom_shift CARET HASH  &custom_shift AT_SIGN DLLR  &custom_shift GRAVE TILDE  &trans
&trans              &custom_shift CARET PERCENT  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_EQUAL     &none                                             &none      &kp Y                     &kp DOUBLE_QUOTES                  &kp UP                    &kp SQT                     &kp KP_MINUS               &kp BSLH
&trans              &kp KP_DIVIDE                &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MULTIPLY  &none   &trans  &trans      &kp LGUI   &kp RCTRL  &none      &kp H                     &kp LEFT                           &kp DOWN                  &kp RIGHT                   &kp KP_PLUS                &kp SQT
&kp LG(LEFT_ARROW)  &kp KP_MINUS                 &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_PLUS                      &trans      &kp PG_UP                        &kp N                     &kp KP_N1                          &kp KP_N2                 &kp KP_N3                   &kp KP_ENTER               &kp RSHFT
&sys_reset          &kp GRAVE                    &trans           &kp KP_NUMBER_0  &trans                            &mo 3   &none   &trans      &kp PG_DN  &kp ENTER  &kp KP_N0                            &kp UP                             &kp DOWN                  &kp KP_DOT                  &kp RBKT                   &sys_reset
            >;
        };

        func {
            bindings = <
&trans  &trans         &kp F10     &kp F11  &kp F12               &kp C_VOL_UP   &tog 1                                      &mo 3   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(LS(C))  &kp F7      &kp F8   &kp F9                &kp C_VOL_DN   &none                                       &none   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(SPACE)  &kp F4      &kp F5   &kp F6                &kp K_MUTE     &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(LS(T))  &kp F1      &kp F2   &kp F3                &kp LG(LS(S))                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(LC(T))  &kp K_CALC  &trans   &kp C_AL_MY_COMPUTER                 &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        num_sym_left {
            bindings = <
&trans  &trans    &trans             &trans    &trans         &trans  &trans                                           &trans       &trans  &trans     &trans    &trans     &trans    &trans
&trans  &trans    &kp LC(PAGE_DOWN)  &kp UP    &kp LC(PG_UP)  &trans  &bootloader                                      &bootloader  &trans  &trans     &kp UP    &trans     &trans    &trans
&trans  &trans    &kp LEFT           &kp DOWN  &kp RIGHT      &trans  &trans       &trans  &trans      &trans  &trans  &trans       &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans    &trans
&trans  &kp LGUI  &kp LCTRL          &kp LALT  &kp LSHFT      &trans                       &trans      &trans                       &trans  &kp RSHFT  &kp RALT  &kp RCTRL  &kp RGUI  &trans
&trans  &trans    &trans             &trans    &trans                 &trans       &trans  &trans      &trans  &trans  &trans               &trans     &trans    &trans     &trans    &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans     &kp RIGHT  &trans     &trans  &trans                                      &trans  &trans  &trans     &kp RIGHT  &trans     &trans  &trans
&trans  &trans  &kp RIGHT  &none      &kp RIGHT  &trans  &trans                                      &trans  &trans  &kp RIGHT  &kp B      &kp RIGHT  &trans  &trans
&trans  &trans  &kp RIGHT  &none      &none      &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &none      &none      &none      &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans                  &trans      &trans                  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans             &trans  &trans  &trans      &trans  &trans  &trans          &trans     &trans     &trans     &trans  &trans
            >;
        };

        scrl {
            bindings = <
&bl BL_TOG    &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans        &trans  &trans       &trans  &bt BT_SEL 0
&bl BL_CYCLE  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &kp LC(HOME)  &none   &kp LC(END)  &trans  &bt BT_SEL 1
&trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &none         &none   &none        &trans  &bt BT_SEL 2
&trans        &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans        &trans  &trans       &trans  &bt BT_SEL 3
&trans        &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans        &trans  &trans       &trans  &bt BT_SEL 4
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        scroll_layer {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
